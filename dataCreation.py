import os
import matplotlib.pyplot as plt
import numpy as np

##############################################################
##    PLEASE DO NOT EDIT THIS FILE WITHOUT PERMISSION       ##
##        - WILL SAP THE FUN OUT OF THE ACTIVITY -          ##
##    (unless its broken in which case, please do :) )      ##
##############################################################

def fandangle_data_fundimental(ncols, nrows, data, answer_file):
    circle_center_x = np.random.randint(5, ncols - 5)  
    circle_center_y = np.random.randint(5, nrows - 5)
    circle_radius = 10
    rnd = np.random.randint(50, 100)

    answer_file.write(f"({circle_center_x}:{circle_center_y}:{circle_radius}),")  # Add answer

    for y in range(nrows - 1):
        for x in range(ncols - 1):
            if (x - circle_center_x)**2 + (y - circle_center_y)**2 <= circle_radius**2:
                if not np.isnan(data[y][x]):
                    data[y][x] = rnd
    return data

def fandangle_data_easy(ncols, nrows, data, answer_file):
    circle_center_x = np.random.randint(5, ncols - 5)  
    circle_center_y = np.random.randint(5, nrows - 5)
    circle_radius = 10
    rnd = np.random.randint(20, 50)

    answer_file.write(f"({circle_center_x}:{circle_center_y}:{circle_radius}),")  # Add answer

    for y in range(nrows - 1):
        for x in range(ncols - 1):
            if (x - circle_center_x)**2 + (y - circle_center_y)**2 <= circle_radius**2:
                if not np.isnan(data[y][x]):
                    data[y][x] = rnd
    return data

def fandangle_data_medium(ncols, nrows, data, answer_file):
    circle_center_x = np.random.randint(5, ncols - 5)  
    circle_center_y = np.random.randint(5, nrows - 5)
    circle_radius = np.random.randint(4, 8)  
    rnd = np.random.randint(20, 40)

    answer_file.write(f"({circle_center_x}:{circle_center_y}:{circle_radius}),")  # Add answer

    for y in range(nrows - 1):
        for x in range(ncols - 1):
            if (x - circle_center_x)**2 + (y - circle_center_y)**2 <= circle_radius**2:
                if not np.isnan(data[y][x]):
                    data[y][x] += rnd
    return data

def fandangle_data_hard(ncols, nrows, data, answer_file):
    num_circles = np.random.randint(3, 8)
    been_circles = []

    for _ in range(num_circles):
        circle_center_x = np.random.randint(5, ncols - 5)  
        circle_center_y = np.random.randint(5, nrows - 5)
        circle_radius = np.random.randint(2, 5)
        
        # Stop direct overlaps. Will not stop near-overlaps however
        if (circle_center_x, circle_center_y) in been_circles: continue
        been_circles.append((circle_center_x, circle_center_y))

        answer_file.write(f"({circle_center_x}:{circle_center_y}:{circle_radius}),")  # Add answer

        for y in range(nrows - 1):
            for x in range(ncols - 1):
                if (x - circle_center_x)**2 + (y - circle_center_y)**2 <= circle_radius**2:
                    if not np.isnan(data[y][x]):
                        data[y][x] += np.random.randint(5, 10)
    return data

def fandangle_data_impossible(ncols, nrows, data, answer_file):
    num_circles = np.random.randint(3, 8) 
    been_circles = []

    for _ in range(num_circles):
        circle_center_x = np.random.randint(5, ncols - 5)  
        circle_center_y = np.random.randint(5, nrows - 5)
        circle_radius = np.random.randint(2, 5)
        
        # Stop direct overlaps. Will not stop near-overlaps however
        if (circle_center_x, circle_center_y) in been_circles: continue
        been_circles.append((circle_center_x, circle_center_y))     

        answer_file.write(f"({circle_center_x}:{circle_center_y}:{circle_radius}),")  # Add answer

        for y in range(nrows - 1):
            for x in range(ncols - 1):
                if (x - circle_center_x)**2 + (y - circle_center_y)**2 <= circle_radius**2:
                    if not np.isnan(data[y][x]):
                        data[y][x] += np.random.randint(5, 10) * ((np.random.randint(0, 2) * 2) - 1)
                # add noise
                data[y][x] += np.random.randint(-3, 3)
    return data



def read_ascii_grid(filename):
    with open(filename, 'r') as f:
        lines = f.readlines()

    ncols = int(lines[0].split()[1])
    nrows = int(lines[1].split()[1])
    xllcorner = float(lines[2].split()[1])
    yllcorner = float(lines[3].split()[1])
    cellsize = float(lines[4].split()[1])

    data = []
    for line in lines[6:]:
        data.extend(map(float, line.split()))

    return ncols, nrows, xllcorner, yllcorner, cellsize, data

def create_heightmap_png(asc_file, png_file, answer_file):
    ncols, nrows, xllcorner, yllcorner, cellsize, data = read_ascii_grid(asc_file)

    # Reshape the data to a 2D array
    data = [data[i:i + ncols] for i in range(0, len(data), ncols)]
    data = list(reversed(data))  # Flip the data vertically since the ASCII grid starts from the top-left

    # Set nodata values to NaN for visualization purposes
    #data = np.array([[val if val != nodata_value else np.nan for val in row] for row in data])
    
    data_file = png_file.split('\\')[-1]
    answer_file.write(f"{data_file}_fundimental.png,")    # format as CSV
    data_fundimental = fandangle_data_fundimental(ncols, nrows, np.copy(data), answer_file)
    answer_file.write(f"\n{data_file}_easy.png,")    # format as CSV
    data_easy = fandangle_data_easy(ncols, nrows, np.copy(data), answer_file)
    answer_file.write(f"\n{data_file}_medium.png,")    # format as CSV
    data_medium = fandangle_data_medium(ncols, nrows, np.copy(data), answer_file)
    answer_file.write(f"\n{data_file}_hard.png,")    # format as CSV
    data_hard = fandangle_data_hard(ncols, nrows, np.copy(data), answer_file)
    answer_file.write(f"\n{data_file}_impossible.png,")    # format as CSV
    data_impossible = fandangle_data_impossible(ncols, nrows, np.copy(data), answer_file)
    answer_file.write("\n")

    # SAVING!
    # Create a PNG heightmap using matplotlib for data_fundimental
    plt.imshow(data_fundimental, cmap='terrain', interpolation='nearest', extent=[xllcorner, xllcorner + ncols * cellsize,
                                                                           yllcorner, yllcorner + nrows * cellsize])
    plt.axis('off')
    plt.savefig(png_file + "_fundimental.png", dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()

    # Create a PNG heightmap using matplotlib for data_easy
    plt.imshow(data_easy, cmap='terrain', interpolation='nearest', extent=[xllcorner, xllcorner + ncols * cellsize,
                                                                           yllcorner, yllcorner + nrows * cellsize])
    plt.axis('off')
    plt.savefig(png_file + "_easy.png", dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()

    # Create a PNG heightmap using matplotlib for data_medium
    plt.imshow(data_medium, cmap='terrain', interpolation='nearest', extent=[xllcorner, xllcorner + ncols * cellsize,
                                                                           yllcorner, yllcorner + nrows * cellsize])
    plt.axis('off')
    plt.savefig(png_file + "_easy.png", dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()

    # Create a PNG heightmap using matplotlib for data_hard
    plt.imshow(data_hard, cmap='terrain', interpolation='nearest', extent=[xllcorner, xllcorner + ncols * cellsize,
                                                                           yllcorner, yllcorner + nrows * cellsize])
    plt.axis('off')
    plt.savefig(png_file + "_hard.png", dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()

    # Create a PNG heightmap using matplotlib for data_impossible
    plt.imshow(data_impossible, cmap='terrain', interpolation='nearest', extent=[xllcorner, xllcorner + ncols * cellsize,
                                                                           yllcorner, yllcorner + nrows * cellsize])
    plt.axis('off')
    plt.savefig(png_file + "_impossible.png", dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()

    # Create a PNG heightmap using matplotlib for data
    plt.imshow(data, cmap='terrain', interpolation='nearest', extent=[xllcorner, xllcorner + ncols * cellsize,
                                                                           yllcorner, yllcorner + nrows * cellsize])
    plt.axis('off')
    plt.savefig(png_file + ".png", dpi=300, bbox_inches='tight', pad_inches=0)
    plt.close()



if __name__ == "__main__":
    # Reset answers
    answersDir = "./answers.txt"
    with open(answersDir, 'w') as answer_file:    
        # Generate the false data
        print("Generating all files...")
        for folder, _, files in os.walk(".\\chosen_data"):
            for asc_file in [os.path.join(folder, filename) for filename in files if filename.endswith(".asc")]:
                # get the file paths
                file = os.path.splitext(asc_file)[0].split('\\')[-1]
                png_file = ".\\input_data\\" + file

                # Do the cool stuff
                # TODO: make multi-threaded... Won't rn as file ops = yuck.
                create_heightmap_png(asc_file, png_file, answer_file)
                print("Created " + file)
                answer_file.write("\n")    # format as CSV

